version: "3.8"
services:
  ftpd:
    build:
      context: .
      dockerfile: ./ftp/ftpd/Dockerfile
      args:
        - FLASK=$VERSION_FLASK
        - FLASK_RESTFUL=$VERSION_FLASK_RESTFUL
        - REQUESTS=$VERSION_REQUESTS
        - TIMEZONE=$TIMEZONE
    ports:
      - "21:21"
      - "5101:5101"
      - "30000-30009:30000-30009"
    volumes:
      - /${ROOT_DIR}:/root
    environment:
      - CONCIERGE_IP_ADDRESS
    depends_on:
      - gui
    restart: always

  nginx:
    image: nginx:1.13
    ports:
      - "80:8000"
    volumes:
      - /nginx/conf:/etc/nginx/conf.d
      - /nginx/uwsgi_params:/etc/nginx/uwsgi_params
      - ${ROOT_DIR}/static:/static
    environment:
      - TZ=$TIMEZONE
    restart: always

  gui:
    build: ./gui
    command: uwsgi --threads 8 --processes 8 --socket :8001 --module gui.wsgi --py-autoreload 1 --logto /tmp/mylog.log
    ports:
      - "8001:8001"
    volumes:
      - ./gui:/code
      - ${ROOT_DIR}/static:/static
      - ${ROOT_DIR}:/root
    expose:
      - "8001"
    environment:
      - TIMEZONE
    depends_on:
      - nginx
    restart: always

  reolink:
    build:
      context: .
      dockerfile: ./camera/brand/reolink/Dockerfile
      args:
        - FLASK=$VERSION_FLASK
        - FLASK_RESTFUL=$VERSION_FLASK_RESTFUL
        - REQUESTS=$VERSION_REQUESTS
        - TIMEZONE=$TIMEZONE
    ports:
      - "5102:5102"
    environment:
      - CONCIERGE_IP_ADDRESS
    depends_on:
      - gui
    restart: always

  detect_shape_snapshot:
    build:
      context: .
      dockerfile: ./detect_shape/Dockerfile
      args:
        - FLASK=$VERSION_FLASK
        - FLASK_RESTFUL=$VERSION_FLASK_RESTFUL
        - TIMEZONE=$TIMEZONE
        - REQUESTS=$VERSION_REQUESTS
    ports:
      - "${PORT_DETECT_SHAPE_SNAPSHOT}:${PORT_DETECT_SHAPE_SNAPSHOT}"
    environment:
      - CONCIERGE_IP_ADDRESS
      - PORT_DETECT_SHAPE=${PORT_DETECT_SHAPE_SNAPSHOT}
    volumes:
      - /${ROOT_DIR}:/root
    restart: always

  detect_shape_video:
    build:
      context: .
      dockerfile: ./detect_shape/Dockerfile
      args:
        - FLASK=$VERSION_FLASK
        - FLASK_RESTFUL=$VERSION_FLASK_RESTFUL
        - TIMEZONE=$TIMEZONE
        - REQUESTS=$VERSION_REQUESTS
    ports:
      - "${PORT_DETECT_SHAPE_VIDEO}:${PORT_DETECT_SHAPE_VIDEO}"
    environment:
      - CONCIERGE_IP_ADDRESS
      - PORT_DETECT_SHAPE=${PORT_DETECT_SHAPE_VIDEO}
    volumes:
      - /${ROOT_DIR}:/root
    restart: always

  detailed_analytics:
    build:
      context: .
      dockerfile: ./detailed_analytics/Dockerfile
      args:
        - FLASK=$VERSION_FLASK
        - FLASK_RESTFUL=$VERSION_FLASK_RESTFUL
        - TIMEZONE=$TIMEZONE
        - REQUESTS=$VERSION_REQUESTS
    ports:
            - "5106:5106"
    environment:
      - CONCIERGE_IP_ADDRESS
    volumes:
      - /${ROOT_DIR}:/root
    restart: always

  motion_detection:
    build:
      context: .
      dockerfile: ./motion/Dockerfile
      args:
        - FLASK=$VERSION_FLASK
        - FLASK_RESTFUL=$VERSION_FLASK_RESTFUL
    ports:
      - "5104:5104"
    environment:
      - CONCIERGE_IP_ADDRESS
      - ROOT_DIR
    volumes:
      - /${ROOT_DIR}:/root
    restart: always

  scheduler:
    build:
      context: .
      dockerfile: ./scheduler/Dockerfile
      args:
        - TIMEZONE=$TIMEZONE
    environment:
      - CONCIERGE_IP_ADDRESS
      - ROOT_DIR
    volumes:
      - /${ROOT_DIR}:/root
    depends_on:
      - gui
    restart: always

  influx:
    build:
      context: .
      dockerfile: ./influx/Dockerfile
    ports:
      - "8086:8086"
    environment:
      - CONCIERGE_IP_ADDRESS
    volumes:
      - /camera/influx/data1:/data
      - /camera/influx/data2:/var/lib/influxdb
    restart: always

  grafana:
    image: grafana/grafana:7.3.0
    ports:
      - "3000:3000"
    restart: always

  interworking:
    build:
      context: .
      dockerfile: ./interworking/Dockerfile
      args:
        - FLASK=$VERSION_FLASK
        - FLASK_RESTFUL=$VERSION_FLASK_RESTFUL
        - TIMEZONE=$TIMEZONE
        - REQUESTS=$VERSION_REQUESTS
    ports:
      - "5107:5107"
    environment:
      - CONCIERGE_IP_ADDRESS
    volumes:
      - /${ROOT_DIR}:/root
    depends_on:
      - influx
    restart: always
   
networks:
  cinternal:
    internal: true
